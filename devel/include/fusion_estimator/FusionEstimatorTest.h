// Generated by gencpp from file fusion_estimator/FusionEstimatorTest.msg
// DO NOT EDIT!


#ifndef FUSION_ESTIMATOR_MESSAGE_FUSIONESTIMATORTEST_H
#define FUSION_ESTIMATOR_MESSAGE_FUSIONESTIMATORTEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fusion_estimator
{
template <class ContainerAllocator>
struct FusionEstimatorTest_
{
  typedef FusionEstimatorTest_<ContainerAllocator> Type;

  FusionEstimatorTest_()
    : stamp()
    , data_check_a()
    , data_check_b()
    , data_check_c()
    , data_check_d()
    , data_check_e()
    , estimated_xyz()
    , estimated_rpy()
    , feet_based_position()
    , feet_based_velocity()
    , others()  {
      data_check_a.assign(0.0);

      data_check_b.assign(0.0);

      data_check_c.assign(0.0);

      data_check_d.assign(0.0);

      data_check_e.assign(0.0);

      estimated_xyz.assign(0.0);

      estimated_rpy.assign(0.0);

      feet_based_position.assign(0.0);

      feet_based_velocity.assign(0.0);

      others.assign(0.0);
  }
  FusionEstimatorTest_(const ContainerAllocator& _alloc)
    : stamp()
    , data_check_a()
    , data_check_b()
    , data_check_c()
    , data_check_d()
    , data_check_e()
    , estimated_xyz()
    , estimated_rpy()
    , feet_based_position()
    , feet_based_velocity()
    , others()  {
  (void)_alloc;
      data_check_a.assign(0.0);

      data_check_b.assign(0.0);

      data_check_c.assign(0.0);

      data_check_d.assign(0.0);

      data_check_e.assign(0.0);

      estimated_xyz.assign(0.0);

      estimated_rpy.assign(0.0);

      feet_based_position.assign(0.0);

      feet_based_velocity.assign(0.0);

      others.assign(0.0);
  }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef boost::array<double, 9>  _data_check_a_type;
  _data_check_a_type data_check_a;

   typedef boost::array<double, 12>  _data_check_b_type;
  _data_check_b_type data_check_b;

   typedef boost::array<double, 12>  _data_check_c_type;
  _data_check_c_type data_check_c;

   typedef boost::array<double, 12>  _data_check_d_type;
  _data_check_d_type data_check_d;

   typedef boost::array<double, 12>  _data_check_e_type;
  _data_check_e_type data_check_e;

   typedef boost::array<double, 9>  _estimated_xyz_type;
  _estimated_xyz_type estimated_xyz;

   typedef boost::array<double, 9>  _estimated_rpy_type;
  _estimated_rpy_type estimated_rpy;

   typedef boost::array<double, 12>  _feet_based_position_type;
  _feet_based_position_type feet_based_position;

   typedef boost::array<double, 12>  _feet_based_velocity_type;
  _feet_based_velocity_type feet_based_velocity;

   typedef boost::array<double, 4>  _others_type;
  _others_type others;





  typedef boost::shared_ptr< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> const> ConstPtr;

}; // struct FusionEstimatorTest_

typedef ::fusion_estimator::FusionEstimatorTest_<std::allocator<void> > FusionEstimatorTest;

typedef boost::shared_ptr< ::fusion_estimator::FusionEstimatorTest > FusionEstimatorTestPtr;
typedef boost::shared_ptr< ::fusion_estimator::FusionEstimatorTest const> FusionEstimatorTestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator1> & lhs, const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.data_check_a == rhs.data_check_a &&
    lhs.data_check_b == rhs.data_check_b &&
    lhs.data_check_c == rhs.data_check_c &&
    lhs.data_check_d == rhs.data_check_d &&
    lhs.data_check_e == rhs.data_check_e &&
    lhs.estimated_xyz == rhs.estimated_xyz &&
    lhs.estimated_rpy == rhs.estimated_rpy &&
    lhs.feet_based_position == rhs.feet_based_position &&
    lhs.feet_based_velocity == rhs.feet_based_velocity &&
    lhs.others == rhs.others;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator1> & lhs, const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fusion_estimator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e10b193fd0c51a4937b1aeebfa61ac4";
  }

  static const char* value(const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e10b193fd0c51a4ULL;
  static const uint64_t static_value2 = 0x937b1aeebfa61ac4ULL;
};

template<class ContainerAllocator>
struct DataType< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fusion_estimator/FusionEstimatorTest";
  }

  static const char* value(const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64[9] data_check_a\n"
"float64[12] data_check_b\n"
"float64[12] data_check_c\n"
"float64[12] data_check_d\n"
"float64[12] data_check_e\n"
"float64[9] estimated_xyz\n"
"float64[9] estimated_rpy\n"
"float64[12] feet_based_position\n"
"float64[12] feet_based_velocity\n"
"float64[4] others\n"
;
  }

  static const char* value(const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.data_check_a);
      stream.next(m.data_check_b);
      stream.next(m.data_check_c);
      stream.next(m.data_check_d);
      stream.next(m.data_check_e);
      stream.next(m.estimated_xyz);
      stream.next(m.estimated_rpy);
      stream.next(m.feet_based_position);
      stream.next(m.feet_based_velocity);
      stream.next(m.others);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FusionEstimatorTest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fusion_estimator::FusionEstimatorTest_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "data_check_a[]" << std::endl;
    for (size_t i = 0; i < v.data_check_a.size(); ++i)
    {
      s << indent << "  data_check_a[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data_check_a[i]);
    }
    s << indent << "data_check_b[]" << std::endl;
    for (size_t i = 0; i < v.data_check_b.size(); ++i)
    {
      s << indent << "  data_check_b[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data_check_b[i]);
    }
    s << indent << "data_check_c[]" << std::endl;
    for (size_t i = 0; i < v.data_check_c.size(); ++i)
    {
      s << indent << "  data_check_c[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data_check_c[i]);
    }
    s << indent << "data_check_d[]" << std::endl;
    for (size_t i = 0; i < v.data_check_d.size(); ++i)
    {
      s << indent << "  data_check_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data_check_d[i]);
    }
    s << indent << "data_check_e[]" << std::endl;
    for (size_t i = 0; i < v.data_check_e.size(); ++i)
    {
      s << indent << "  data_check_e[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data_check_e[i]);
    }
    s << indent << "estimated_xyz[]" << std::endl;
    for (size_t i = 0; i < v.estimated_xyz.size(); ++i)
    {
      s << indent << "  estimated_xyz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.estimated_xyz[i]);
    }
    s << indent << "estimated_rpy[]" << std::endl;
    for (size_t i = 0; i < v.estimated_rpy.size(); ++i)
    {
      s << indent << "  estimated_rpy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.estimated_rpy[i]);
    }
    s << indent << "feet_based_position[]" << std::endl;
    for (size_t i = 0; i < v.feet_based_position.size(); ++i)
    {
      s << indent << "  feet_based_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feet_based_position[i]);
    }
    s << indent << "feet_based_velocity[]" << std::endl;
    for (size_t i = 0; i < v.feet_based_velocity.size(); ++i)
    {
      s << indent << "  feet_based_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feet_based_velocity[i]);
    }
    s << indent << "others[]" << std::endl;
    for (size_t i = 0; i < v.others.size(); ++i)
    {
      s << indent << "  others[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.others[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSION_ESTIMATOR_MESSAGE_FUSIONESTIMATORTEST_H
