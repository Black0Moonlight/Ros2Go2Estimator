# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fusion_estimator/FusionEstimatorTest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class FusionEstimatorTest(genpy.Message):
  _md5sum = "7e10b193fd0c51a4937b1aeebfa61ac4"
  _type = "fusion_estimator/FusionEstimatorTest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
float64[9] data_check_a
float64[12] data_check_b
float64[12] data_check_c
float64[12] data_check_d
float64[12] data_check_e
float64[9] estimated_xyz
float64[9] estimated_rpy
float64[12] feet_based_position
float64[12] feet_based_velocity
float64[4] others"""
  __slots__ = ['stamp','data_check_a','data_check_b','data_check_c','data_check_d','data_check_e','estimated_xyz','estimated_rpy','feet_based_position','feet_based_velocity','others']
  _slot_types = ['time','float64[9]','float64[12]','float64[12]','float64[12]','float64[12]','float64[9]','float64[9]','float64[12]','float64[12]','float64[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,data_check_a,data_check_b,data_check_c,data_check_d,data_check_e,estimated_xyz,estimated_rpy,feet_based_position,feet_based_velocity,others

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusionEstimatorTest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.data_check_a is None:
        self.data_check_a = [0.] * 9
      if self.data_check_b is None:
        self.data_check_b = [0.] * 12
      if self.data_check_c is None:
        self.data_check_c = [0.] * 12
      if self.data_check_d is None:
        self.data_check_d = [0.] * 12
      if self.data_check_e is None:
        self.data_check_e = [0.] * 12
      if self.estimated_xyz is None:
        self.estimated_xyz = [0.] * 9
      if self.estimated_rpy is None:
        self.estimated_rpy = [0.] * 9
      if self.feet_based_position is None:
        self.feet_based_position = [0.] * 12
      if self.feet_based_velocity is None:
        self.feet_based_velocity = [0.] * 12
      if self.others is None:
        self.others = [0.] * 4
    else:
      self.stamp = genpy.Time()
      self.data_check_a = [0.] * 9
      self.data_check_b = [0.] * 12
      self.data_check_c = [0.] * 12
      self.data_check_d = [0.] * 12
      self.data_check_e = [0.] * 12
      self.estimated_xyz = [0.] * 9
      self.estimated_rpy = [0.] * 9
      self.feet_based_position = [0.] * 12
      self.feet_based_velocity = [0.] * 12
      self.others = [0.] * 4

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      buff.write(_get_struct_9d().pack(*self.data_check_a))
      buff.write(_get_struct_12d().pack(*self.data_check_b))
      buff.write(_get_struct_12d().pack(*self.data_check_c))
      buff.write(_get_struct_12d().pack(*self.data_check_d))
      buff.write(_get_struct_12d().pack(*self.data_check_e))
      buff.write(_get_struct_9d().pack(*self.estimated_xyz))
      buff.write(_get_struct_9d().pack(*self.estimated_rpy))
      buff.write(_get_struct_12d().pack(*self.feet_based_position))
      buff.write(_get_struct_12d().pack(*self.feet_based_velocity))
      buff.write(_get_struct_4d().pack(*self.others))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 72
      self.data_check_a = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 96
      self.data_check_b = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 96
      self.data_check_c = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 96
      self.data_check_d = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 96
      self.data_check_e = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 72
      self.estimated_xyz = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.estimated_rpy = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 96
      self.feet_based_position = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 96
      self.feet_based_velocity = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 32
      self.others = _get_struct_4d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      buff.write(self.data_check_a.tostring())
      buff.write(self.data_check_b.tostring())
      buff.write(self.data_check_c.tostring())
      buff.write(self.data_check_d.tostring())
      buff.write(self.data_check_e.tostring())
      buff.write(self.estimated_xyz.tostring())
      buff.write(self.estimated_rpy.tostring())
      buff.write(self.feet_based_position.tostring())
      buff.write(self.feet_based_velocity.tostring())
      buff.write(self.others.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 72
      self.data_check_a = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 96
      self.data_check_b = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 96
      self.data_check_c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 96
      self.data_check_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 96
      self.data_check_e = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 72
      self.estimated_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.estimated_rpy = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 96
      self.feet_based_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 96
      self.feet_based_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 32
      self.others = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
